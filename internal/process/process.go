package process

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/websocket"
)

type Message struct {
	Appid  		int       	`json:"appid"`
	Date   		time.Time 	`json:"date"`
	ID       	int    		`json:"id"`
	Message  	string 		`json:"message"`
	Priority 	int    		`json:"priority"`
	Title    	string 		`json:"title"`
}

type AutoGenerated struct {
	Appid  int       `json:"appid"`
	Date   time.Time `json:"date"`
	Extras struct {
		HomeAppliancesLightingOn struct {
			Brightness int `json:"brightness"`
		} `json:"home::appliances::lighting::on"`
		HomeAppliancesThermostatChangeTemperature struct {
			Temperature int `json:"temperature"`
		} `json:"home::appliances::thermostat::change_temperature"`
	} `json:"extras"`
	ID       int    `json:"id"`
	Message  string `json:"message"`
	Priority int    `json:"priority"`
	Title    string `json:"title"`
}

type Process struct {
	wsConn *websocket.Conn
	lastRead []byte

	_ struct {}
}

func Connect(server *TargetServer) (*Process, error) {
	dial := websocket.Dialer{}
	header := http.Header{}

	header.Add("X-Gotify-Key", server.token)
	wsConn, _, err := dial.Dial(server.ToString(), header)
	fmt.Println(header)

	return &Process{
		wsConn: wsConn,
	}, err
}

func (proc *Process) Read() ([]byte, error) {
	_, p, err := proc.wsConn.ReadMessage()

	proc.lastRead = p
	return p, err
}

func (proc *Process) GetLast() []byte {
	return proc.lastRead
}

func (proc *Process) LastDecode() (Message, error) {
	msg := Message{}
	err := json.Unmarshal(proc.GetLast(), &msg)

	return msg, err
}

func (proc *Process) LastToString() string {
	return string(proc.GetLast())
}

func (proc *Process) Close() error {
	return proc.wsConn.Close()
}